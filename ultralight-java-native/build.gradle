import net.jan.gradle.cmake.tasks.CMakeBuildTask
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    dependencies {
        classpath files("gradle-cmake.jar")
    }
}


apply plugin: "net.jan.gradle.cmake"

group 'net.janrupf'

def ultralightOsIdentifier = {
    def bitName = (System.getProperty("os.arch", "?").contains("64") ||
            System.getProperty("sun.arch.data.model", "?").contains("64")) ? "64" : "32"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "win-x" + bitName
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        return "mac-x" + bitName
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        return "linux-x" + bitName
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

task build(type: CMakeBuildTask) {
    sourceDirectory file("src/main/c")
    generationDirectory new File(buildDir, "cmake-gen-" + ultralightOsIdentifier())

    cmake {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            arguments = [
                    "-A", "x64",
                    "-T", "host=x64"
            ]
        }

        variables = [
                "CMAKE_BUILD_TYPE"              : java.util.Optional.of("Release"),
                "CMAKE_RUNTIME_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath),
                "CMAKE_LIBRARY_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath),
                "CMAKE_ARCHIVE_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath)
        ]

        def javaHome = file(System.getProperty("java.home"))
        if (javaHome != null) {
            def includeDir = new File(javaHome, "include")
            if (!includeDir.exists()) {
                javaHome = javaHome.parentFile
                includeDir = new File(javaHome, "include")
                if (!includeDir.exists()) {
                    throw new UnsupportedOperationException("Gradle has been run with a JRE, and a JDK could not be found")
                }
            }

            println "Building using JDK at ${javaHome.absolutePath}"
            variable "JAVA_HOME", javaHome.absolutePath.replace('\\', '/')
        }
    }
}